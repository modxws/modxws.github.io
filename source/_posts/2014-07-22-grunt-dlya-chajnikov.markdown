---
layout: post
title: "Grunt для чайников"
date: 2014-07-22 00:21:32 +0300
comments: true
permalink: grunt-dlya-chajnikov
categories: Grunt
---
Оригинал&nbsp;— статья [Grunt for People Who Think Things Like Grunt are Weird and Hard](http://24ways.org/2013/grunt-is-not-weird-and-hard/)

![grunt лого](images/grunt/grunt_title.jpg "Grunt")

## Фронтэнд разрабочикам часто говорят:

Разрабатывайте всё в&nbsp;маленьких кусках CSS и&nbsp;JavaScript кода, чтобы вам было понятно, а&nbsp;дальше соберите их&nbsp;вместе для продакшн сайта.
Сожмите ваш CSS и&nbsp;минифицируйте JavaScript, чтобы размеры файлов были минимальными в&nbsp;работающем сайте.
Оптимизируйте ваши изображения для уменьшения их&nbsp;размера без ущерба для качества. 
Используйте Sass для создания CSS из-за возможности использования многочисленных полезных абстракций.
Это не&nbsp;всеобъемлющий список действий, но&nbsp;некоторые из&nbsp;них мы&nbsp;должны делать. Вы&nbsp;можете называть их&nbsp;задания. 
Могу поспорить, что вы&nbsp;уже слышали о&nbsp;[Grunt](http://gruntjs.com/). Короче говоря, Grunt&nbsp;— это исполнитель заданий. Grunt может делать их&nbsp;за&nbsp;вас. После того, как вы&nbsp;его установили, что на&nbsp;самом-то деле и&nbsp;не&nbsp;особенно сложно, то&nbsp;он&nbsp;выполняет автоматически, без необходимости снова продумывать все задания.
Но&nbsp;давайте начистоту: Grunt&nbsp;— это одна из&nbsp;новомодных штукенций, которой пользуются все крутые детишечки, но&nbsp;которая на&nbsp;первый взгляд кажется странной и&nbsp;недоступной. Я&nbsp;вас понимаю. Эта статья именно для вас.

## Давайте разберёмся со&nbsp;всеми вами

Должно быть, вы&nbsp;слышали о&nbsp;Grunt, но&nbsp;руки к&nbsp;нему у&nbsp;вас не&nbsp;доходили. Я&nbsp;уверен это касается многих из&nbsp;вас. Может некоторое из&nbsp;высказываний прямо ваш случай.

### Мне не&nbsp;нужно всё&nbsp;то, что делает Grunt

На&nbsp;самом деле совсем наоборот. Просмотрите ещё раз список чуть выше. Эти все вещи совсем неприятно делать. Но&nbsp;сегодня&nbsp;— это всё входит в&nbsp;цикл разработки сайта. Если вы&nbsp;уже делаете их&nbsp;все, то&nbsp;это просто отлично. Может вы&nbsp;используете множество разных инструментов, чтобы всё выполнить. Grunt поможет, так сказать, поместить их&nbsp;все под одну крышу. Если&nbsp;же вы&nbsp;ещё не&nbsp;делаете, тогда мы&nbsp;идём к&nbsp;вам Grunt поможет вам. После того, как вы&nbsp;начнёте использовать Grunt, то&nbsp;он&nbsp;может делать многие другие вещи, что вам позволит выполнять лучше вашу работу.

### Grunt работает на&nbsp;Node.js&nbsp;— я&nbsp;совсем не&nbsp;знаю Node

Вам не&nbsp;нужно знать Node. Совсем как вам не&nbsp;нужно знать Ruby, чтобы использовать Sass. Или PHP, чтобы использовать WordPress. Или&nbsp;C++, чтобы использовать Microsoft Word.

### У&nbsp;меня есть куча других способов сделать&nbsp;то, что может сделать для меня Grunt

К&nbsp;вам вопрос: все они содержатся в&nbsp;одном месте и&nbsp;сконфигурированны для автозапуска по&nbsp;необходимости и&nbsp;расшарены между каждым членом команды, работающей над проектом? Ставлю на&nbsp;то, что навряд&nbsp;ли это так.

### Grunt это командная строка&nbsp;— а&nbsp;я&nbsp;же просто дизайнер

Ну, я&nbsp;тоже дизайнер. Я&nbsp;предпочитаю нативные приложения с&nbsp;графическим интерфейсом, всегда когда только можно. Но&nbsp;я&nbsp;не&nbsp;думаю, что это нужно для Grunt.

Максимум, когда нужно использовать командную строку:

Перейти в&nbsp;директорию проекта.
Напечатать grunt и&nbsp;нажать Enter.
После установка, что опять&nbsp;же не&nbsp;очень сложно.

## Ну&nbsp;ладно. Давайте уже поставим этот GRUNT

Условием для работы Grunt является предустановленная Node. Если Node у&nbsp;вас не&nbsp;установлена, то&nbsp;не&nbsp;волнуйтесь&nbsp;— это очень просто сделать. Вам просто нужно скачать установщик и&nbsp;запустить его&nbsp;— [официальный сайт Node](http://nodejs.org/).

Ставить Grunt нужно для каждого проекта. Перейдите в&nbsp;папку проекта. Нужно создать файл с&nbsp;названием package.json в&nbsp;корне:

![Создание конфигурационного Grunt файла](images/grunt/package-json-file.gif)

Со&nbsp;следующим содержимым:
```
{
  "name": "example-project",
  "version": "0.1.0",
  "devDependencies": {
    "grunt": "~0.4.1"
  }
}
```
Можете спокойно менять название проекта и&nbsp;версию, но&nbsp;все devDependencies вещи должны оставаться такие как сейчас.

Это&nbsp;то, как Node работает с&nbsp;зависимостями. У&nbsp;Node есть менеджер пакетов, который называется [NPM](https://npmjs.org/) (Node packaged modules) для управления Node зависимостями (например, как gem для Ruby, если вам такое знакомо). Вы&nbsp;даже можете думать об&nbsp;этом как о&nbsp;плагине для WordPress.

После создания package.json в&nbsp;корне, перейдите в&nbsp;терминал и&nbsp;пройдите в&nbsp;вашу папку. Терминальные ламеры как&nbsp;я, например, делают это так:

![Смена директории в терминале для чайников](images/grunt/drag-folder.gif)

И&nbsp;дальше запустил команду:
```
npm install
```

После запуска этой команды, появится новая папка в&nbsp;вашем проекте с&nbsp;названием node_modules.

![Пример папки node_modules](images/grunt/node_modules.gif)

Другие файлы, что вы&nbsp;видите, _README.md_ и&nbsp;_LICENSE_ здесь потому что я&nbsp;собираюсь положить этот проект [на&nbsp;GitHub](https://github.com/chriscoyier/My-Grunt-Boilerplate) и&nbsp;это стандарт в&nbsp;таких случаях.

Последний шаг в&nbsp;инсталяции&nbsp;— это установить Grunt CLI (command line interface&nbsp;— интерфейс командной строки). Это&nbsp;то, что даёт возможность запускать grunt команды из&nbsp;строки. Без этого, любые grunt команды просто вызовут ошибку «Command Not Found». Эта отдельная установка нужна для эфективности. Иначе&nbsp;бы у&nbsp;вас было 10&nbsp;проектов с&nbsp;10&nbsp;копиями Grunt CLI.

Дальше запустите следующую команду в&nbsp;терминале:
```
npm install -g grunt-cli
```

Дальше закройте и&nbsp;откройте терминал. Это один из&nbsp;способов проверить правильно&nbsp;ли всё работает. Схоже с&nbsp;перезапуском компьютера в&nbsp;старые добрые времена, как при установке какой-либо программы.

Давайте соединим с&nbsp;помощью GRUNT некоторые файлы

Допустим в&nbsp;нашем проекте есть три отдельных JavaScript файла:

*   _jquery.js_&nbsp;— используемая нами библиотека.
*   _carousel.js_&nbsp;— jQuery плагин.
*   _global.js_&nbsp;— Пользовательский JavaScript файл, где мы&nbsp;всё конфигурируем и&nbsp;вызываем наш плагин.

В&nbsp;продакшене, мы&nbsp;могли&nbsp;бы объединить все эти файлы вместе из&nbsp;соображений производительности (один запрос лучше, чем три). Там нужно скомандовать Grunt сделать это.

Но&nbsp;постойте. Grunt вообще-то не&nbsp;делает всё сам по&nbsp;себе. Это исполнитель задач. Задачи естественно нужно ещё добавить. Мы&nbsp;ещё не&nbsp;настраивали Grunt для какой-то работы, поэтому давайте сделаем это.

Официальный Grunt плагин для объединения файлов&nbsp;— это [grunt-contrib-concat](https://github.com/gruntjs/grunt-contrib-concat). Вы&nbsp;можете прочитать о&nbsp;нём на&nbsp;Гитхабе, но&nbsp;для работы всё что нужно&nbsp;— это запустить следующую команду из&nbsp;строки (естественно в&nbsp;корне вашего проекта):

```bash
npm install grunt-contrib-concat --save-dev
```


Толково будет сделать это следующим образом: ваш package.json файл будет автообновится, чтобы включить эту новую зависимость. Откройте и&nbsp;проверьте файл. Вы&nbsp;увидите новую строку:
```
"grunt-contrib-concat": "~0.3.0"
```

Теперь можна использовать это. Нам нужно сконфигурировать Grunt и&nbsp;задать ему задачу.

Вы&nbsp;сообщаете Grunt, что делать через конфигурационный файл с&nbsp;названием Gruntfile.js2

Совсем как наш package.json файл, наш Gruntfile.js имеет специальный формат, который должен соблюдаться. Не&nbsp;важно что там значит каждое слово&nbsp;— просто взгляните на&nbsp;[пример использования](https://github.com/gruntjs/grunt-contrib-concat#usage-examples):
```
module.exports = function(grunt) {

    // 1. Всё конфигурирование тут
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),

        concat: {
            // 2. Конфигурация для объединения файлов тут.
        }

    });

    // 3. Здесь мы сообщаем Grunt, что мы планируем использовать этот плагин:
    grunt.loadNpmTasks('grunt-contrib-concat');

    // 4. Мы сообщаем Grunt, что нужно делать, когда мы введём "grunt" в терминале.
    grunt.registerTask('default', ['concat']);

}
```

Теперь нам нужно создать эту конфигурацию. Документация может быть просто огромной. Давайте сосредоточимся на&nbsp;очень простом примере.

Как вы&nbsp;помните, у&nbsp;нас 3&nbsp;JavaScript файла, которые нужно объединить. Укажим к&nbsp;ним пути в&nbsp;виде массива в&nbsp;src разделе (указываем пути в&nbsp;кавычках) и&nbsp;далее укажем результирующий файл в&nbsp;разделе dest. Наш результирующий файл может пока что не&nbsp;существовать. Он&nbsp;будет создан при запуске этой задачи и&nbsp;объединит все файлы.

Оба наших файла _jquery.js_ и&nbsp;_carousel.js_&nbsp;— это библиотеки. Скорее всего мы&nbsp;не&nbsp;будем их&nbsp;трогать. Поэтому для порядка, будем держать их&nbsp;в&nbsp;папке _/js/libs/_. Наш _global.js_ файл&nbsp;— это место, где мы&nbsp;пишем наш код, поэтому он&nbsp;будет прямо в&nbsp;_/js/_&nbsp;папке. Теперь давайте сообщим Grunt найти все эти файлы и&nbsp;объединить их&nbsp;[вместе в&nbsp;один файл](https://github.com/chriscoyier/My-Grunt-Boilerplate/blob/master/Gruntfile.js) с&nbsp;названием _production.js_.
```
concat: {   
    dist: {
        src: [
            'js/libs/*.js', // Все JS в папке libs
            'js/global.js'  // Какой-то файл
        ],
        dest: 'js/build/production.js',
    }
}
```

Внимание: в&nbsp;этой статье будет маленькие чанки конфигурационного кода как я&nbsp;уже привёл выше. Целью является сфокусировать внимание на&nbsp;важных вещах, поэтому может вначале будет трудно понять как определённый чанк размещается в&nbsp;большем файле. Если вы&nbsp;запутаетесь, то&nbsp;тогда смотрите полный файл.

С&nbsp;этой конфигурацией для объединения, перейдите в&nbsp;терминал и&nbsp;запустите команду:
```
grunt
```

Смотрите что произойдёт! Будет создан файл production.js и&nbsp;произойдёт объединение наших 3х&nbsp;файлов. Это был огого момент для меня! Почувствуйте колебание силы. Давайте ещё сделаем пару штукенций!

## Минификация JAVASCRIPT с&nbsp;помощью GRUNT

Мы&nbsp;сделали столько подготовительной работы, добавили новые задания для лёгкого запуска Grunt. Всё, что нам нужно:

Найти Grunt плагин, который будет делать что нам нужно:

*   Изучить конфигурирование этого плагина
*   Написать рабочую конфигурацию для нашего проекта

Официальный плагин для минификации кода&nbsp;— это [grunt-contrib-uglify](https://github.com/gruntjs/grunt-contrib-uglify). Прямо как мы&nbsp;делали недавно, давайте запустим NPM команду для его установки:
```
npm install grunt-contrib-uglify --save-dev
```
Далее внесём изменения в&nbsp;наш Gruntfile.js для загрузки плагина:
```
grunt.loadNpmTasks('grunt-contrib-uglify');
```
Далее сконфигурируем его:
```
 uglify: {
    build: {
        src: 'js/build/production.js',
        dest: 'js/build/production.min.js'
    }
}
```
Изменим это дефолтное задание для запуска минификации:
```
grunt.registerTask('default', ['concat', 'uglify']);
```

Правда очень похоже на&nbsp;установки объединения файлов?

Запустим grunt в&nbsp;терминале и&nbsp;на&nbsp;выходе получим чудестый минифицированный JavaScript:

![Минифицированный JavaScript](images/grunt/uglify-code.gif)

Этот _production.min.js_ файл мы&nbsp;будем использовать в&nbsp;нашем _index.html_ файле.

## Оптимизируем изображения с&nbsp;помощью Grunt

Давайте перейдём дальше. Официальный плагин для минификации изображений&nbsp;— это [grunt-contrib-imagemin](https://github.com/gruntjs/grunt-contrib-imagemin). Установите его:
```
npm install grunt-contrib-imagemin --save-dev
```
Зарегистрируйте его в&nbsp;_Gruntfile.js_:
```
grunt.loadNpmTasks('grunt-contrib-imagemin');
```
Сконфигурируйте его:
```
imagemin: {
    dynamic: {
        files: [{
            expand: true,
            cwd: 'images/',
            src: ['**/*.{png,jpg,gif}'],
            dest: 'images/build/'
        }]
    }
}
```
Убедитесь, что он&nbsp;запущен:
```
grunt.registerTask('default', ['concat', 'uglify', 'imagemin']);
```
Запустите grunt и&nbsp;посмотрите как осуществляется чудестное сжатие изображений:

![Сжатие изображений](images/grunt/squished-images.gif)

Нравится мне всё это дело.

## Автоматизация всего процесса

До&nbsp;этого момента мы&nbsp;делали очень полезные вещи, но&nbsp;есть пара моментов, которые сделают нас умнее и&nbsp;сделают некоторые вещи понятнее, в&nbsp;том числе Grunt:

*   Запускайте эти задания автоматически, когда их&nbsp;нужно запустить
*   Запускайте только те&nbsp;задания, которые нужно запускать в&nbsp;данный момент

Например:

*   Объединяйте и&nbsp;минифицируйте JavaScript, когда JavaScript изменяется
*   Оптимизируйте изображения, когда новое изображения добавлено или какие-то изменены

Мы&nbsp;можем сделать это наблюдая за&nbsp;файлами. Мы&nbsp;можем сообщить Grunt смотреть на&nbsp;изменения в&nbsp;определённых местах&nbsp;и, когда там происходят изменения, запускать определённые задания. Наблюдение осуществляется через официальный плагин [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch).

Установите его сами. Это делается аналогично тому, как мы&nbsp;делали раньше. Мы&nbsp;сконфигурируем его указав определённые файлы (или папки, или оба варианта) для наблюдения. Под наблюдением, я&nbsp;имею в&nbsp;виду мониторинг, удаление или добавление файлов. Далее мы&nbsp;указываем ему какие задачи нужно выполнить при обнаружении изменений.

Мы&nbsp;хотим запустить наше объединение и&nbsp;минификацию при обнаружении любых изменений в&nbsp;папке&nbsp;_/js/_. Когда это происходит, мы&nbsp;должны запустить задачи связанные с&nbsp;JavaScript. А&nbsp;когда эти вещи происходят где-то в&nbsp;другом месте, то&nbsp;не&nbsp;нужно запускать JavaScript-заданий, таким образом:
```
watch: {
    scripts: {
        files: ['js/*.js'],
        tasks: ['concat', 'uglify'],
        options: {
            spawn: false,
        },
    } 
}
```
Всё пока вроде просто, правда? Одной непонятной штукой может показаться spawn. И&nbsp;знаете что? Я&nbsp;и&nbsp;сам не&nbsp;знаю что это. Из&nbsp;всего, что написано в&nbsp;документациии&nbsp;— я&nbsp;понял что это дефолтное значение. Такая вселенная разработки. Просто оставьте как есть и&nbsp;будет всё&nbsp;ок, либо&nbsp;же почитайте доки.

Внимание: Иногда очень разочаровывает, когда вроде всё понятно в&nbsp;уроке, а&nbsp;на&nbsp;практике ничего не&nbsp;полчается. Если вы&nbsp;не&nbsp;можете заставить Grunt запуститься после изменений, то&nbsp;скорее всего вы&nbsp;допустили ошибку в&nbsp;вашем Gruntfile.js файле. Это может выглядеть следующим образом в&nbsp;терминале:

![Ошибки при запуске Grunt](images/grunt/error-running-grunt.gif)

Обычно Grunt сам отлично сообщает о&nbsp;том, что случилось, просто смотрите сообщения об&nbsp;ошибке. В&nbsp;этом случае, синтаксическая ошибка в&nbsp;виде пропущенной запятой выдавало ошибку. Я&nbsp;добавил запятую и&nbsp;всё запустилось удачно.

## Добавим GRUNT к&nbsp;нашей предобработке

Последним пунктом нашего списка вначале статьи&nbsp;— это использование Sass&nbsp;— ещё другое задание Grunt очень для нас подходит. Но&nbsp;подождите? Разве технически Sass не&nbsp;на&nbsp;Ruby? Действительно это так. Но&nbsp;есть ещё версия [Sass для Node](https://github.com/sindresorhus/grunt-sass) и&nbsp;таким образом не&nbsp;добавляет дополнительные зависимости в&nbsp;наш проект, поэтому мы&nbsp;будем использовать официальный плагин [grunt-contrib-sass](https://github.com/gruntjs/grunt-contrib-sass), который подразумевает, что вы&nbsp;установили Sass на&nbsp;своей машине. Если вы&nbsp;не&nbsp;установили, то&nbsp;следуйте [инструкциям командной строки](http://sass-lang.com/install).

Что прикольное в&nbsp;Sass&nbsp;— это&nbsp;то, что он&nbsp;может делать объединение и&nbsp;минификацию самостоятельно. Поэтому для нашего маленького проекта мы&nbsp;можем компилировать наш global.scss:
```
sass: {
    dist: {
        options: {
            style: 'compressed'
        },
        files: {
            'css/build/global.css': 'css/global.scss'
        }
    } 
}
```
Не&nbsp;хотелось&nbsp;бы вручную запускать эту задачу. Уже у&nbsp;нас есть установленный плагин для наблюдения, давайте его использовать! В&nbsp;конфигурацию наблюдения добавим ещё одну подзадачу:
```
css: {
    files: ['css/*.scss'],
    tasks: ['sass'],
    options: {
        spawn: false,
    }
}
```

Давайте это сделаем. Теперь каждый раз мы&nbsp;меняем любой из&nbsp;наших Sass файлов, то&nbsp;CSS будет автоматически обновлятся.

Давайте сделаем ещё одно действие (асолютно оправданное) и&nbsp;добавим LiveReload. С&nbsp;помощью LiveReload, вам не&nbsp;нужно каждый раз обновлять браузер. Обновление страницы происходит автоматически таким образом, что при изменении CSS, новые стили вставляются без обновления всей страницы (очень полезно при тяжеловесных сайтах).

LiveReload очень просто установить поскольку он&nbsp;уже встроен в&nbsp;наш плагин наблюдения. Всё что нужно сделать это:

Установите [плагин для браузера](http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-). Добавьте сверху конфигурации наблюдения:
```
. watch: {
    options: {
        livereload: true,
    },
    scripts: {   
    /* etc */
```

Перезапустите браузер и&nbsp;нажмите на&nbsp;LiveReload иконку для активации. Обновите Sass файл и&nbsp;наблюдайте как страница автоматически изменится.
Live reloading browser
Live reloading browser
Круто!

### Предпочитаете видео?

Если вы&nbsp;любите учится по&nbsp;видео, то&nbsp;я&nbsp;сделал видеоурок для этой статьи, который опубликовал в&nbsp;статье [CSS-Tricks: First Moments with Grunt](http://css-tricks.com/video-screencasts/130-first-moments-grunt/)

## Поднятие уровня

Как вы&nbsp;уже можете представить, существует много уровней, на&nbsp;которые вы&nbsp;можете поднятся в&nbsp;вашем процессе разработки. Это однозначно может случится на&nbsp;вашей [работе на&nbsp;полную ставку](http://www.smashingmagazine.com/2013/06/11/front-end-ops/) в&nbsp;какой-то организации.

Некоторые хардкорные ботаны могут посмеиваться над простотой изложенного здесь материала. Но&nbsp;я&nbsp;бы посоветовал им&nbsp;сбавить обороты. Даже такие простые вещи, которые мы&nbsp;здесь делаем имеют значительную ценность. И&nbsp;не&nbsp;забывайте это всё бесплатно и&nbsp;опенсорс, что просто потрясающе.

Вы&nbsp;можете поднять свой уровень добавив ещё пару полезных задач:

Запускать ваш CSS через [Autoprefixer](http://css-tricks.com/autoprefixer/) (5+&nbsp;я советую) вместо препроцессорных дополнений.
Писать и&nbsp;запускать JavaScript юнит тестов (например: [Jasmine](https://github.com/pivotal/jasmine)).
Строить ваши спрайты изображений и&nbsp;SVG иконки автоматически, (пример: [Grunticon](https://github.com/filamentgroup/grunticon)).
Запускать сервер, чтобы вы&nbsp;могли связать объекты с&nbsp;определённым файловым путём и&nbsp;использовать сервисы, которые требуют настоящий URL такие как TypeKit и&nbsp;другие, а&nbsp;также убрать необходимость использования других инструментов для этого, таких как MAMP.
Устранять проблемы с&nbsp;кодом с&nbsp;помощью [HTML-Inspector](http://philipwalton.com/articles/introducing-html-inspector/), [CSS Lint](http://csslint.net/) или [JS&nbsp;Hint](http://www.jshint.com/).
[Вставлять новый CSS автоматически](http://css-tricks.com/cross-browser-css-injection/) в&nbsp;браузер, каждый раз при изменении в&nbsp;стилях.
Помогать вам коммитить или пушить в&nbsp;систему контроля версий, такой как GitHub.
Добавлять номер версий к&nbsp;вашим объектам (переполнения кеша).
Помогать вам размещать на&nbsp;тестовой и&nbsp;производственной среде (например: [DPLOY](http://leanmeanfightingmachine.github.io/dploy/)).
Вы&nbsp;можете поднять свой уровень, просто поняв как сам по&nbsp;себе работает Grunt:

Читайте [Grunt Boilerplate](http://www.integralist.co.uk/Grunt-Boilerplate.html) автор Mark McDonnell.
Читайте [Grunt Tips and Tricks](http://blog.ponyfoo.com/2013/11/13/grunt-tips-and-tricks) автор Nicolas Bevacqua.
Организуйте ваш Gruntfile.js просто [разделив его на&nbsp;несколько маленьких файлов](https://github.com/cowboy/wesbos/commit/5a2980a7818957cbaeedcd7552af9ce54e05e3fb).
Просмотрите Gruntfile.js файлы других проектов и&nbsp;людей.
Изучайте больше по&nbsp;Grunt копаясь в&nbsp;исходниках и&nbsp;изучая его API.

## Давайте делится впечатлениями

Я&nbsp;думаю, некоторый делёж впечатлениями будет неплох для общего процесса обучения. Если вы&nbsp;устанавливаете Grunt в&nbsp;первый раз (или помните как это уже делали), то&nbsp;запоминайте особенно маленькие разочаровающие вещи, которые вам попадаются, но&nbsp;которые вы&nbsp;успешно преодолеете. Эти маленькие проблемы можете описать здесь в&nbsp;комментариях. Таким образом у&nbsp;нас будет маленький список возможных проблем и&nbsp;преодолеем их&nbsp;вместе.

*   Может такое случится, что однажды кто-то сделает чудестное Grunt приложение для вашей ОС. Но&nbsp;я&nbsp;не&nbsp;уверен, что это скоро случится. Конфигурационные плагины&nbsp;— это важная вещь при использовании Grunt. Каждый плагин, чуть отличается в&nbsp;зависимости от&nbsp;того, что он&nbsp;делает. Это значит, что невозможно сделать толковый&nbsp;UI для каждого из&nbsp;плагинов. 
    Возможно самое толковое, из&nbsp;созданных на&nbsp;данный момент, дополнение&nbsp;— это [Grunt DevTools](https://github.com/vladikoff/grunt-devtools).

2.  На&nbsp;Gruntfile.js часто ссылаются как Gruntfile в&nbsp;документации и&nbsp;примерах. Не&nbsp;называйте его буквально Gruntfile&nbsp;— он&nbsp;тогда не&nbsp;будет работать.