<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grunt | MODX, фронтэнд и другие уроки]]></title>
  <link href="http://modxws.github.io/blog/categories/grunt/atom.xml" rel="self"/>
  <link href="http://modxws.github.io/"/>
  <updated>2014-07-22T02:15:11+03:00</updated>
  <id>http://modxws.github.io/</id>
  <author>
    <name><![CDATA[Viktor Matushevskyi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grunt для чайников]]></title>
    <link href="http://modxws.github.io/grunt-dlya-chajnikov"/>
    <updated>2014-07-22T00:21:32+03:00</updated>
    <id>http://modxws.github.io/grunt-dlya-chajnikov</id>
    <content type="html"><![CDATA[<p>Оригинал&nbsp;— статья <a href="http://24ways.org/2013/grunt-is-not-weird-and-hard/">Grunt for People Who Think Things Like Grunt are Weird and Hard</a></p>

<p><img src="images/grunt/grunt_title.jpg" title="Grunt" alt="grunt лого" /></p>

<h2>Фронтэнд разрабочикам часто говорят:</h2>

<p>Разрабатывайте всё в&nbsp;маленьких кусках CSS и&nbsp;JavaScript кода, чтобы вам было понятно, а&nbsp;дальше соберите их&nbsp;вместе для продакшн сайта.
Сожмите ваш CSS и&nbsp;минифицируйте JavaScript, чтобы размеры файлов были минимальными в&nbsp;работающем сайте.
Оптимизируйте ваши изображения для уменьшения их&nbsp;размера без ущерба для качества.
Используйте Sass для создания CSS из-за возможности использования многочисленных полезных абстракций.
Это не&nbsp;всеобъемлющий список действий, но&nbsp;некоторые из&nbsp;них мы&nbsp;должны делать. Вы&nbsp;можете называть их&nbsp;задания.
Могу поспорить, что вы&nbsp;уже слышали о&nbsp;<a href="http://gruntjs.com/">Grunt</a>. Короче говоря, Grunt&nbsp;— это исполнитель заданий. Grunt может делать их&nbsp;за&nbsp;вас. После того, как вы&nbsp;его установили, что на&nbsp;самом-то деле и&nbsp;не&nbsp;особенно сложно, то&nbsp;он&nbsp;выполняет автоматически, без необходимости снова продумывать все задания.
Но&nbsp;давайте начистоту: Grunt&nbsp;— это одна из&nbsp;новомодных штукенций, которой пользуются все крутые детишечки, но&nbsp;которая на&nbsp;первый взгляд кажется странной и&nbsp;недоступной. Я&nbsp;вас понимаю. Эта статья именно для вас.</p>

<h2>Давайте разберёмся со&nbsp;всеми вами</h2>

<p>Должно быть, вы&nbsp;слышали о&nbsp;Grunt, но&nbsp;руки к&nbsp;нему у&nbsp;вас не&nbsp;доходили. Я&nbsp;уверен это касается многих из&nbsp;вас. Может некоторое из&nbsp;высказываний прямо ваш случай.</p>

<h3>Мне не&nbsp;нужно всё&nbsp;то, что делает Grunt</h3>

<p>На&nbsp;самом деле совсем наоборот. Просмотрите ещё раз список чуть выше. Эти все вещи совсем неприятно делать. Но&nbsp;сегодня&nbsp;— это всё входит в&nbsp;цикл разработки сайта. Если вы&nbsp;уже делаете их&nbsp;все, то&nbsp;это просто отлично. Может вы&nbsp;используете множество разных инструментов, чтобы всё выполнить. Grunt поможет, так сказать, поместить их&nbsp;все под одну крышу. Если&nbsp;же вы&nbsp;ещё не&nbsp;делаете, тогда мы&nbsp;идём к&nbsp;вам Grunt поможет вам. После того, как вы&nbsp;начнёте использовать Grunt, то&nbsp;он&nbsp;может делать многие другие вещи, что вам позволит выполнять лучше вашу работу.</p>

<h3>Grunt работает на&nbsp;Node.js&nbsp;— я&nbsp;совсем не&nbsp;знаю Node</h3>

<p>Вам не&nbsp;нужно знать Node. Совсем как вам не&nbsp;нужно знать Ruby, чтобы использовать Sass. Или PHP, чтобы использовать WordPress. Или&nbsp;C++, чтобы использовать Microsoft Word.</p>

<h3>У&nbsp;меня есть куча других способов сделать&nbsp;то, что может сделать для меня Grunt</h3>

<p>К&nbsp;вам вопрос: все они содержатся в&nbsp;одном месте и&nbsp;сконфигурированны для автозапуска по&nbsp;необходимости и&nbsp;расшарены между каждым членом команды, работающей над проектом? Ставлю на&nbsp;то, что навряд&nbsp;ли это так.</p>

<h3>Grunt это командная строка&nbsp;— а&nbsp;я&nbsp;же просто дизайнер</h3>

<p>Ну, я&nbsp;тоже дизайнер. Я&nbsp;предпочитаю нативные приложения с&nbsp;графическим интерфейсом, всегда когда только можно. Но&nbsp;я&nbsp;не&nbsp;думаю, что это нужно для Grunt.</p>

<p>Максимум, когда нужно использовать командную строку:</p>

<p>Перейти в&nbsp;директорию проекта.
Напечатать grunt и&nbsp;нажать Enter.
После установка, что опять&nbsp;же не&nbsp;очень сложно.</p>

<h2>Ну&nbsp;ладно. Давайте уже поставим этот GRUNT</h2>

<p>Условием для работы Grunt является предустановленная Node. Если Node у&nbsp;вас не&nbsp;установлена, то&nbsp;не&nbsp;волнуйтесь&nbsp;— это очень просто сделать. Вам просто нужно скачать установщик и&nbsp;запустить его&nbsp;— <a href="http://nodejs.org/">официальный сайт Node</a>.</p>

<p>Ставить Grunt нужно для каждого проекта. Перейдите в&nbsp;папку проекта. Нужно создать файл с&nbsp;названием package.json в&nbsp;корне:</p>

<p><img src="images/grunt/package-json-file.gif" alt="Создание конфигурационного Grunt файла" /></p>

<p>Со&nbsp;следующим содержимым:
```
{
  &ldquo;name&rdquo;: &ldquo;example-project&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.1.0&rdquo;,
  &ldquo;devDependencies&rdquo;: {</p>

<pre><code>"grunt": "~0.4.1"
</code></pre>

<p>  }
}
```
Можете спокойно менять название проекта и&nbsp;версию, но&nbsp;все devDependencies вещи должны оставаться такие как сейчас.</p>

<p>Это&nbsp;то, как Node работает с&nbsp;зависимостями. У&nbsp;Node есть менеджер пакетов, который называется <a href="https://npmjs.org/">NPM</a> (Node packaged modules) для управления Node зависимостями (например, как gem для Ruby, если вам такое знакомо). Вы&nbsp;даже можете думать об&nbsp;этом как о&nbsp;плагине для WordPress.</p>

<p>После создания package.json в&nbsp;корне, перейдите в&nbsp;терминал и&nbsp;пройдите в&nbsp;вашу папку. Терминальные ламеры как&nbsp;я, например, делают это так:</p>

<p><img src="images/grunt/drag-folder.gif" alt="Смена директории в терминале для чайников" /></p>

<p>И&nbsp;дальше запустил команду:
<code>
npm install
</code></p>

<p>После запуска этой команды, появится новая папка в&nbsp;вашем проекте с&nbsp;названием node_modules.</p>

<p><img src="images/grunt/node_modules.gif" alt="Пример папки node_modules" /></p>

<p>Другие файлы, что вы&nbsp;видите, <em>README.md</em> и&nbsp;<em>LICENSE</em> здесь потому что я&nbsp;собираюсь положить этот проект <a href="https://github.com/chriscoyier/My-Grunt-Boilerplate">на&nbsp;GitHub</a> и&nbsp;это стандарт в&nbsp;таких случаях.</p>

<p>Последний шаг в&nbsp;инсталяции&nbsp;— это установить Grunt CLI (command line interface&nbsp;— интерфейс командной строки). Это&nbsp;то, что даёт возможность запускать grunt команды из&nbsp;строки. Без этого, любые grunt команды просто вызовут ошибку «Command Not Found». Эта отдельная установка нужна для эфективности. Иначе&nbsp;бы у&nbsp;вас было 10&nbsp;проектов с&nbsp;10&nbsp;копиями Grunt CLI.</p>

<p>Дальше запустите следующую команду в&nbsp;терминале:
<code>
npm install -g grunt-cli
</code></p>

<p>Дальше закройте и&nbsp;откройте терминал. Это один из&nbsp;способов проверить правильно&nbsp;ли всё работает. Схоже с&nbsp;перезапуском компьютера в&nbsp;старые добрые времена, как при установке какой-либо программы.</p>

<p>Давайте соединим с&nbsp;помощью GRUNT некоторые файлы</p>

<p>Допустим в&nbsp;нашем проекте есть три отдельных JavaScript файла:</p>

<ul>
<li><em>jquery.js</em>&nbsp;— используемая нами библиотека.</li>
<li><em>carousel.js</em>&nbsp;— jQuery плагин.</li>
<li><em>global.js</em>&nbsp;— Пользовательский JavaScript файл, где мы&nbsp;всё конфигурируем и&nbsp;вызываем наш плагин.</li>
</ul>


<p>В&nbsp;продакшене, мы&nbsp;могли&nbsp;бы объединить все эти файлы вместе из&nbsp;соображений производительности (один запрос лучше, чем три). Там нужно скомандовать Grunt сделать это.</p>

<p>Но&nbsp;постойте. Grunt вообще-то не&nbsp;делает всё сам по&nbsp;себе. Это исполнитель задач. Задачи естественно нужно ещё добавить. Мы&nbsp;ещё не&nbsp;настраивали Grunt для какой-то работы, поэтому давайте сделаем это.</p>

<p>Официальный Grunt плагин для объединения файлов&nbsp;— это <a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-concat</a>. Вы&nbsp;можете прочитать о&nbsp;нём на&nbsp;Гитхабе, но&nbsp;для работы всё что нужно&nbsp;— это запустить следующую команду из&nbsp;строки (естественно в&nbsp;корне вашего проекта):</p>

<p><code>bash
npm install grunt-contrib-concat --save-dev
</code></p>

<p>Толково будет сделать это следующим образом: ваш package.json файл будет автообновится, чтобы включить эту новую зависимость. Откройте и&nbsp;проверьте файл. Вы&nbsp;увидите новую строку:
<code>
"grunt-contrib-concat": "~0.3.0"
</code></p>

<p>Теперь можна использовать это. Нам нужно сконфигурировать Grunt и&nbsp;задать ему задачу.</p>

<p>Вы&nbsp;сообщаете Grunt, что делать через конфигурационный файл с&nbsp;названием Gruntfile.js2</p>

<p>Совсем как наш package.json файл, наш Gruntfile.js имеет специальный формат, который должен соблюдаться. Не&nbsp;важно что там значит каждое слово&nbsp;— просто взгляните на&nbsp;<a href="https://github.com/gruntjs/grunt-contrib-concat#usage-examples">пример использования</a>:
```
module.exports = function(grunt) {</p>

<pre><code>// 1. Всё конфигурирование тут
grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),

    concat: {
        // 2. Конфигурация для объединения файлов тут.
    }

});

// 3. Здесь мы сообщаем Grunt, что мы планируем использовать этот плагин:
grunt.loadNpmTasks('grunt-contrib-concat');

// 4. Мы сообщаем Grunt, что нужно делать, когда мы введём "grunt" в терминале.
grunt.registerTask('default', ['concat']);
</code></pre>

<p>}
```</p>

<p>Теперь нам нужно создать эту конфигурацию. Документация может быть просто огромной. Давайте сосредоточимся на&nbsp;очень простом примере.</p>

<p>Как вы&nbsp;помните, у&nbsp;нас 3&nbsp;JavaScript файла, которые нужно объединить. Укажим к&nbsp;ним пути в&nbsp;виде массива в&nbsp;src разделе (указываем пути в&nbsp;кавычках) и&nbsp;далее укажем результирующий файл в&nbsp;разделе dest. Наш результирующий файл может пока что не&nbsp;существовать. Он&nbsp;будет создан при запуске этой задачи и&nbsp;объединит все файлы.</p>

<p>Оба наших файла <em>jquery.js</em> и&nbsp;<em>carousel.js</em>&nbsp;— это библиотеки. Скорее всего мы&nbsp;не&nbsp;будем их&nbsp;трогать. Поэтому для порядка, будем держать их&nbsp;в&nbsp;папке <em>/js/libs/</em>. Наш <em>global.js</em> файл&nbsp;— это место, где мы&nbsp;пишем наш код, поэтому он&nbsp;будет прямо в&nbsp;<em>/js/</em>&nbsp;папке. Теперь давайте сообщим Grunt найти все эти файлы и&nbsp;объединить их&nbsp;<a href="https://github.com/chriscoyier/My-Grunt-Boilerplate/blob/master/Gruntfile.js">вместе в&nbsp;один файл</a> с&nbsp;названием <em>production.js</em>.
```
concat: {</p>

<pre><code>dist: {
    src: [
        'js/libs/*.js', // Все JS в папке libs
        'js/global.js'  // Какой-то файл
    ],
    dest: 'js/build/production.js',
}
</code></pre>

<p>}
```</p>

<p>Внимание: в&nbsp;этой статье будет маленькие чанки конфигурационного кода как я&nbsp;уже привёл выше. Целью является сфокусировать внимание на&nbsp;важных вещах, поэтому может вначале будет трудно понять как определённый чанк размещается в&nbsp;большем файле. Если вы&nbsp;запутаетесь, то&nbsp;тогда смотрите полный файл.</p>

<p>С&nbsp;этой конфигурацией для объединения, перейдите в&nbsp;терминал и&nbsp;запустите команду:
<code>
grunt
</code></p>

<p>Смотрите что произойдёт! Будет создан файл production.js и&nbsp;произойдёт объединение наших 3х&nbsp;файлов. Это был огого момент для меня! Почувствуйте колебание силы. Давайте ещё сделаем пару штукенций!</p>

<h2>Минификация JAVASCRIPT с&nbsp;помощью GRUNT</h2>

<p>Мы&nbsp;сделали столько подготовительной работы, добавили новые задания для лёгкого запуска Grunt. Всё, что нам нужно:</p>

<p>Найти Grunt плагин, который будет делать что нам нужно:</p>

<ul>
<li>Изучить конфигурирование этого плагина</li>
<li>Написать рабочую конфигурацию для нашего проекта</li>
</ul>


<p>Официальный плагин для минификации кода&nbsp;— это <a href="https://github.com/gruntjs/grunt-contrib-uglify">grunt-contrib-uglify</a>. Прямо как мы&nbsp;делали недавно, давайте запустим NPM команду для его установки:
<code>
npm install grunt-contrib-uglify --save-dev
</code>
Далее внесём изменения в&nbsp;наш Gruntfile.js для загрузки плагина:
<code>
grunt.loadNpmTasks('grunt-contrib-uglify');
</code>
Далее сконфигурируем его:
```
 uglify: {</p>

<pre><code>build: {
    src: 'js/build/production.js',
    dest: 'js/build/production.min.js'
}
</code></pre>

<p>}
<code>
Изменим это дефолтное задание для запуска минификации:
</code>
grunt.registerTask(&lsquo;default&rsquo;, [&lsquo;concat&rsquo;, &lsquo;uglify&rsquo;]);
```</p>

<p>Правда очень похоже на&nbsp;установки объединения файлов?</p>

<p>Запустим grunt в&nbsp;терминале и&nbsp;на&nbsp;выходе получим чудестый минифицированный JavaScript:</p>

<p><img src="images/grunt/uglify-code.gif" alt="Минифицированный JavaScript" /></p>

<p>Этот <em>production.min.js</em> файл мы&nbsp;будем использовать в&nbsp;нашем <em>index.html</em> файле.</p>

<h2>Оптимизируем изображения с&nbsp;помощью Grunt</h2>

<p>Давайте перейдём дальше. Официальный плагин для минификации изображений&nbsp;— это <a href="https://github.com/gruntjs/grunt-contrib-imagemin">grunt-contrib-imagemin</a>. Установите его:
<code>
npm install grunt-contrib-imagemin --save-dev
</code>
Зарегистрируйте его в&nbsp;<em>Gruntfile.js</em>:
<code>
grunt.loadNpmTasks('grunt-contrib-imagemin');
</code>
Сконфигурируйте его:
```
imagemin: {</p>

<pre><code>dynamic: {
    files: [{
        expand: true,
        cwd: 'images/',
        src: ['**/*.{png,jpg,gif}'],
        dest: 'images/build/'
    }]
}
</code></pre>

<p>}
<code>
Убедитесь, что он&amp;nbsp;запущен:
</code>
grunt.registerTask(&lsquo;default&rsquo;, [&lsquo;concat&rsquo;, &lsquo;uglify&rsquo;, &lsquo;imagemin&rsquo;]);
```
Запустите grunt и&nbsp;посмотрите как осуществляется чудестное сжатие изображений:</p>

<p><img src="images/grunt/squished-images.gif" alt="Сжатие изображений" /></p>

<p>Нравится мне всё это дело.</p>

<h2>Автоматизация всего процесса</h2>

<p>До&nbsp;этого момента мы&nbsp;делали очень полезные вещи, но&nbsp;есть пара моментов, которые сделают нас умнее и&nbsp;сделают некоторые вещи понятнее, в&nbsp;том числе Grunt:</p>

<ul>
<li>Запускайте эти задания автоматически, когда их&nbsp;нужно запустить</li>
<li>Запускайте только те&nbsp;задания, которые нужно запускать в&nbsp;данный момент</li>
</ul>


<p>Например:</p>

<ul>
<li>Объединяйте и&nbsp;минифицируйте JavaScript, когда JavaScript изменяется</li>
<li>Оптимизируйте изображения, когда новое изображения добавлено или какие-то изменены</li>
</ul>


<p>Мы&nbsp;можем сделать это наблюдая за&nbsp;файлами. Мы&nbsp;можем сообщить Grunt смотреть на&nbsp;изменения в&nbsp;определённых местах&nbsp;и, когда там происходят изменения, запускать определённые задания. Наблюдение осуществляется через официальный плагин <a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a>.</p>

<p>Установите его сами. Это делается аналогично тому, как мы&nbsp;делали раньше. Мы&nbsp;сконфигурируем его указав определённые файлы (или папки, или оба варианта) для наблюдения. Под наблюдением, я&nbsp;имею в&nbsp;виду мониторинг, удаление или добавление файлов. Далее мы&nbsp;указываем ему какие задачи нужно выполнить при обнаружении изменений.</p>

<p>Мы&nbsp;хотим запустить наше объединение и&nbsp;минификацию при обнаружении любых изменений в&nbsp;папке&nbsp;<em>/js/</em>. Когда это происходит, мы&nbsp;должны запустить задачи связанные с&nbsp;JavaScript. А&nbsp;когда эти вещи происходят где-то в&nbsp;другом месте, то&nbsp;не&nbsp;нужно запускать JavaScript-заданий, таким образом:
```
watch: {</p>

<pre><code>scripts: {
    files: ['js/*.js'],
    tasks: ['concat', 'uglify'],
    options: {
        spawn: false,
    },
} 
</code></pre>

<p>}
```
Всё пока вроде просто, правда? Одной непонятной штукой может показаться spawn. И&nbsp;знаете что? Я&nbsp;и&nbsp;сам не&nbsp;знаю что это. Из&nbsp;всего, что написано в&nbsp;документациии&nbsp;— я&nbsp;понял что это дефолтное значение. Такая вселенная разработки. Просто оставьте как есть и&nbsp;будет всё&nbsp;ок, либо&nbsp;же почитайте доки.</p>

<p>Внимание: Иногда очень разочаровывает, когда вроде всё понятно в&nbsp;уроке, а&nbsp;на&nbsp;практике ничего не&nbsp;полчается. Если вы&nbsp;не&nbsp;можете заставить Grunt запуститься после изменений, то&nbsp;скорее всего вы&nbsp;допустили ошибку в&nbsp;вашем Gruntfile.js файле. Это может выглядеть следующим образом в&nbsp;терминале:</p>

<p><img src="images/grunt/error-running-grunt.gif" alt="Ошибки при запуске Grunt" /></p>

<p>Обычно Grunt сам отлично сообщает о&nbsp;том, что случилось, просто смотрите сообщения об&nbsp;ошибке. В&nbsp;этом случае, синтаксическая ошибка в&nbsp;виде пропущенной запятой выдавало ошибку. Я&nbsp;добавил запятую и&nbsp;всё запустилось удачно.</p>

<h2>Добавим GRUNT к&nbsp;нашей предобработке</h2>

<p>Последним пунктом нашего списка вначале статьи&nbsp;— это использование Sass&nbsp;— ещё другое задание Grunt очень для нас подходит. Но&nbsp;подождите? Разве технически Sass не&nbsp;на&nbsp;Ruby? Действительно это так. Но&nbsp;есть ещё версия <a href="https://github.com/sindresorhus/grunt-sass">Sass для Node</a> и&nbsp;таким образом не&nbsp;добавляет дополнительные зависимости в&nbsp;наш проект, поэтому мы&nbsp;будем использовать официальный плагин <a href="https://github.com/gruntjs/grunt-contrib-sass">grunt-contrib-sass</a>, который подразумевает, что вы&nbsp;установили Sass на&nbsp;своей машине. Если вы&nbsp;не&nbsp;установили, то&nbsp;следуйте <a href="http://sass-lang.com/install">инструкциям командной строки</a>.</p>

<p>Что прикольное в&nbsp;Sass&nbsp;— это&nbsp;то, что он&nbsp;может делать объединение и&nbsp;минификацию самостоятельно. Поэтому для нашего маленького проекта мы&nbsp;можем компилировать наш global.scss:
```
sass: {</p>

<pre><code>dist: {
    options: {
        style: 'compressed'
    },
    files: {
        'css/build/global.css': 'css/global.scss'
    }
} 
</code></pre>

<p>}
<code>
Не&amp;nbsp;хотелось&amp;nbsp;бы вручную запускать эту задачу. Уже у&amp;nbsp;нас есть установленный плагин для наблюдения, давайте его использовать! В&amp;nbsp;конфигурацию наблюдения добавим ещё одну подзадачу:
</code>
css: {</p>

<pre><code>files: ['css/*.scss'],
tasks: ['sass'],
options: {
    spawn: false,
}
</code></pre>

<p>}
```</p>

<p>Давайте это сделаем. Теперь каждый раз мы&nbsp;меняем любой из&nbsp;наших Sass файлов, то&nbsp;CSS будет автоматически обновлятся.</p>

<p>Давайте сделаем ещё одно действие (асолютно оправданное) и&nbsp;добавим LiveReload. С&nbsp;помощью LiveReload, вам не&nbsp;нужно каждый раз обновлять браузер. Обновление страницы происходит автоматически таким образом, что при изменении CSS, новые стили вставляются без обновления всей страницы (очень полезно при тяжеловесных сайтах).</p>

<p>LiveReload очень просто установить поскольку он&nbsp;уже встроен в&nbsp;наш плагин наблюдения. Всё что нужно сделать это:</p>

<p>Установите <a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">плагин для браузера</a>. Добавьте сверху конфигурации наблюдения:
```
. watch: {</p>

<pre><code>options: {
    livereload: true,
},
scripts: {   
/* etc */
</code></pre>

<p>```</p>

<p>Перезапустите браузер и&nbsp;нажмите на&nbsp;LiveReload иконку для активации. Обновите Sass файл и&nbsp;наблюдайте как страница автоматически изменится.
Live reloading browser
Live reloading browser
Круто!</p>

<h3>Предпочитаете видео?</h3>

<p>Если вы&nbsp;любите учится по&nbsp;видео, то&nbsp;я&nbsp;сделал видеоурок для этой статьи, который опубликовал в&nbsp;статье <a href="http://css-tricks.com/video-screencasts/130-first-moments-grunt/">CSS-Tricks: First Moments with Grunt</a></p>

<h2>Поднятие уровня</h2>

<p>Как вы&nbsp;уже можете представить, существует много уровней, на&nbsp;которые вы&nbsp;можете поднятся в&nbsp;вашем процессе разработки. Это однозначно может случится на&nbsp;вашей <a href="http://www.smashingmagazine.com/2013/06/11/front-end-ops/">работе на&nbsp;полную ставку</a> в&nbsp;какой-то организации.</p>

<p>Некоторые хардкорные ботаны могут посмеиваться над простотой изложенного здесь материала. Но&nbsp;я&nbsp;бы посоветовал им&nbsp;сбавить обороты. Даже такие простые вещи, которые мы&nbsp;здесь делаем имеют значительную ценность. И&nbsp;не&nbsp;забывайте это всё бесплатно и&nbsp;опенсорс, что просто потрясающе.</p>

<p>Вы&nbsp;можете поднять свой уровень добавив ещё пару полезных задач:</p>

<p>Запускать ваш CSS через <a href="http://css-tricks.com/autoprefixer/">Autoprefixer</a> (5+&nbsp;я советую) вместо препроцессорных дополнений.
Писать и&nbsp;запускать JavaScript юнит тестов (например: <a href="https://github.com/pivotal/jasmine">Jasmine</a>).
Строить ваши спрайты изображений и&nbsp;SVG иконки автоматически, (пример: <a href="https://github.com/filamentgroup/grunticon">Grunticon</a>).
Запускать сервер, чтобы вы&nbsp;могли связать объекты с&nbsp;определённым файловым путём и&nbsp;использовать сервисы, которые требуют настоящий URL такие как TypeKit и&nbsp;другие, а&nbsp;также убрать необходимость использования других инструментов для этого, таких как MAMP.
Устранять проблемы с&nbsp;кодом с&nbsp;помощью <a href="http://philipwalton.com/articles/introducing-html-inspector/">HTML-Inspector</a>, <a href="http://csslint.net/">CSS Lint</a> или <a href="http://www.jshint.com/">JS&nbsp;Hint</a>.
<a href="http://css-tricks.com/cross-browser-css-injection/">Вставлять новый CSS автоматически</a> в&nbsp;браузер, каждый раз при изменении в&nbsp;стилях.
Помогать вам коммитить или пушить в&nbsp;систему контроля версий, такой как GitHub.
Добавлять номер версий к&nbsp;вашим объектам (переполнения кеша).
Помогать вам размещать на&nbsp;тестовой и&nbsp;производственной среде (например: <a href="http://leanmeanfightingmachine.github.io/dploy/">DPLOY</a>).
Вы&nbsp;можете поднять свой уровень, просто поняв как сам по&nbsp;себе работает Grunt:</p>

<p>Читайте <a href="http://www.integralist.co.uk/Grunt-Boilerplate.html">Grunt Boilerplate</a> автор Mark McDonnell.
Читайте <a href="http://blog.ponyfoo.com/2013/11/13/grunt-tips-and-tricks">Grunt Tips and Tricks</a> автор Nicolas Bevacqua.
Организуйте ваш Gruntfile.js просто <a href="https://github.com/cowboy/wesbos/commit/5a2980a7818957cbaeedcd7552af9ce54e05e3fb">разделив его на&nbsp;несколько маленьких файлов</a>.
Просмотрите Gruntfile.js файлы других проектов и&nbsp;людей.
Изучайте больше по&nbsp;Grunt копаясь в&nbsp;исходниках и&nbsp;изучая его API.</p>

<h2>Давайте делится впечатлениями</h2>

<p>Я&nbsp;думаю, некоторый делёж впечатлениями будет неплох для общего процесса обучения. Если вы&nbsp;устанавливаете Grunt в&nbsp;первый раз (или помните как это уже делали), то&nbsp;запоминайте особенно маленькие разочаровающие вещи, которые вам попадаются, но&nbsp;которые вы&nbsp;успешно преодолеете. Эти маленькие проблемы можете описать здесь в&nbsp;комментариях. Таким образом у&nbsp;нас будет маленький список возможных проблем и&nbsp;преодолеем их&nbsp;вместе.</p>

<ul>
<li><p>Может такое случится, что однажды кто-то сделает чудестное Grunt приложение для вашей ОС. Но&nbsp;я&nbsp;не&nbsp;уверен, что это скоро случится. Конфигурационные плагины&nbsp;— это важная вещь при использовании Grunt. Каждый плагин, чуть отличается в&nbsp;зависимости от&nbsp;того, что он&nbsp;делает. Это значит, что невозможно сделать толковый&nbsp;UI для каждого из&nbsp;плагинов.
Возможно самое толковое, из&nbsp;созданных на&nbsp;данный момент, дополнение&nbsp;— это <a href="https://github.com/vladikoff/grunt-devtools">Grunt DevTools</a>.</p></li>
<li><p>На&nbsp;Gruntfile.js часто ссылаются как Gruntfile в&nbsp;документации и&nbsp;примерах. Не&nbsp;называйте его буквально Gruntfile&nbsp;— он&nbsp;тогда не&nbsp;будет работать.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
